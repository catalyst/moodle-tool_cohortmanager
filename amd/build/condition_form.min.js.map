{"version":3,"file":"condition_form.min.js","sources":["../src/condition_form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Condition modal form.\n *\n * @module     tool_cohortmanager/condition_form\n * @copyright  2022 Catalyst IT\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Fragment from 'core/fragment';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\n\n/**\n * A list of used selectors.\n */\nconst SELECTORS = {\n    ADD_CONDITION_BUTTON: '#id_conditionmodalbutton',\n    SELECT_CONDITION: '#id_condition',\n    CONDITIONS_LIST: '#conditions',\n    RULE_FROM_CONDITIONS_JSON: '#id_conditionjson',\n    RULE_FROM_IS_CONDITIONS_CHANGED: '#id_isconditionschanged',\n    CONDITIONS_NOT_SAVED_WARNING: '#tool-cohortmanager-not-saved',\n    CONDITION_EDIT_ACTION: 'tool-cohortmanager-condition-edit',\n    CONDITION_DELETE_ACTION: 'tool-cohortmanager-condition-delete',\n};\n\n/**\n * Init of the module.\n */\nexport const init = () => {\n    const addButton = document.querySelector(SELECTORS.ADD_CONDITION_BUTTON);\n    const conditionSelect = document.querySelector(SELECTORS.SELECT_CONDITION);\n\n    addButton.addEventListener('click', (e) => {\n        e.preventDefault();\n        const className = conditionSelect.value;\n        if (className !== '') {\n            displayModalForm(className, '');\n        }\n    });\n    applyConditionActions();\n};\n\n/**\n * Get modal form html body using fragment API.\n *\n * @param {string} className\n * @param {string} submittedData Submitted form data.\n * @param {any} defaults Default values for the form\n * @returns {Promise}\n */\nconst getModalFormBody = (className, submittedData, defaults) => {\n    if (defaults === undefined) {\n        defaults = '';\n    }\n\n    const params = {\n        classname: className,\n        jsonformdata: JSON.stringify(submittedData),\n        defaults: JSON.stringify(defaults),\n    };\n\n    return Fragment.loadFragment('tool_cohortmanager', 'condition_form', 1, params);\n};\n\n/**\n * Display Modal form.\n *\n * @param {string} className\n * @param {any} defaults Default values for the form\n */\nconst displayModalForm = (className, defaults) => {\n\n    if (defaults === undefined) {\n        defaults = '';\n    }\n\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: getString('conditionformtitle', 'tool_cohortmanager'),\n        body: getModalFormBody(className, '', defaults),\n        large: true,\n    }).then(function (modal) {\n\n        modal.getRoot().on(ModalEvents.save, function(e) {\n            e.preventDefault();\n            modal.getRoot().find('form').submit();\n        });\n\n        modal.getRoot().on(ModalEvents.hidden, function() {\n            modal.destroy();\n        });\n\n        modal.getRoot().on('submit', 'form', function(e) {\n            e.preventDefault();\n            submitModalFormAjax(className, modal);\n        });\n\n        modal.show();\n    });\n};\n\n/**\n * Submit modal form via ajax.\n *\n * @param {string} className Condition class name.\n * @param {object} modal Modal object.\n */\nconst submitModalFormAjax = (className, modal) => {\n    const changeEvent = document.createEvent('HTMLEvents');\n    changeEvent.initEvent('change', true, true);\n\n    // Prompt all inputs to run their validation functions.\n    // Normally this would happen when the form is submitted, but\n    // since we aren't submitting the form normally we need to run client side\n    // validation.\n    modal.getRoot().find(':input').each(function(index, element) {\n        element.dispatchEvent(changeEvent);\n    });\n\n    const invalid = modal.getRoot().find('[aria-invalid=\"true\"]');\n\n    // If we found invalid fields, focus on the first one and do not submit via ajax.\n    if (invalid.length) {\n        invalid.first().focus();\n    } else {\n        const submittedData = modal.getRoot().find('form').serialize();\n\n        Ajax.call([{\n            methodname: 'tool_cohortmanager_submit_condition_form',\n            args: {classname: className, jsonformdata: JSON.stringify(submittedData)},\n            done: function (response) {\n                updateCondition(response);\n                renderConditions(getConditions());\n                modal.destroy();\n            },\n            fail: function () {\n                modal.setBody(getModalFormBody(className, submittedData, ''));\n            }\n        }]);\n    }\n};\n\n/**\n * Update condition with provided data.\n *\n * @param {object} data Updated condition data.\n */\nconst updateCondition = (data) => {\n    let condition = {...data};\n\n    let conditions = getConditions();\n\n    if (condition.position >= 0) {\n        conditions[condition.position] = condition;\n    } else {\n        conditions.push(condition);\n        condition.position = conditions.length - 1;\n    }\n\n    saveConditionsToRuleForm(conditions);\n};\n\n/**\n * Get a list of all conditions.\n *\n * @returns {*[]}\n */\nconst getConditions = () => {\n    let conditions = [];\n    const conditionsjson = document.querySelector(SELECTORS.RULE_FROM_CONDITIONS_JSON).value;\n    if (conditionsjson !== '') {\n        conditions = JSON.parse(conditionsjson);\n    }\n    return conditions;\n\n};\n\n/**\n * Save a list of conditions to a rule form element.\n *\n * @param {array} conditions A list of conditions to save\n */\nconst saveConditionsToRuleForm = (conditions) => {\n    document.querySelector(SELECTORS.RULE_FROM_CONDITIONS_JSON).setAttribute('value', JSON.stringify(conditions));\n    document.querySelector(SELECTORS.RULE_FROM_IS_CONDITIONS_CHANGED).setAttribute('value', 1);\n};\n\n/**\n * Display a warning that conditions are not saved.\n */\nconst displayNotSavedWarning = () => {\n    document.querySelector(SELECTORS.CONDITIONS_NOT_SAVED_WARNING).classList.remove('hidden');\n};\n\n/**\n * Render conditions.\n *\n * @param {array} conditions A list of conditions to render.\n */\nconst renderConditions = (conditions) => {\n    Templates.render(\n        'tool_cohortmanager/conditions',\n        {'conditions' : conditions}\n    ).then(function(html) {\n        document.querySelector(SELECTORS.CONDITIONS_LIST).innerHTML = html;\n        applyConditionActions();\n        displayNotSavedWarning();\n    }).fail(function() {\n        Notification.exception({message: 'Error updating conditions'});\n    });\n};\n\n/**\n * Apply actions to conditions.\n */\nconst applyConditionActions = () => {\n\n    // Delete actions.\n    const deleteActions = document.getElementsByClassName(SELECTORS.CONDITION_DELETE_ACTION);\n    for (let i = 0; i < deleteActions.length; i++) {\n        deleteActions[i].addEventListener('click', () => {\n            // On a click to a delete icon, grab the position of the selected for deleting condition\n            // and remove an element of that position from the list of all existing conditions.\n            // Then save updated list of conditions to the rule form and render new list on a screen.\n            let position = deleteActions[i].dataset.position;\n            let conditions = getConditions()\n                .filter(c => c.position !== position)\n                .map((condition, index) => ({...condition, position: index}));\n            saveConditionsToRuleForm(conditions);\n            renderConditions(conditions);\n        });\n    }\n\n    // Edit actions.\n    const editActions = document.getElementsByClassName(SELECTORS.CONDITION_EDIT_ACTION);\n    for (let i = 0; i < editActions.length; i++) {\n        editActions[i].addEventListener('click', () => {\n            // On a click to an edit icon for a selected condition, grab condition data from the list of\n            // all conditions by its position and then render modal form using the condition class.\n            let conditions = getConditions();\n            let conditionPosition = editActions[i].dataset.position;\n            let condition = conditions[conditionPosition];\n\n            displayModalForm(condition.classname, condition);\n        });\n    }\n};\n"],"names":["SELECTORS","addButton","document","querySelector","conditionSelect","addEventListener","e","preventDefault","className","value","displayModalForm","applyConditionActions","getModalFormBody","submittedData","defaults","undefined","params","classname","jsonformdata","JSON","stringify","Fragment","loadFragment","create","type","ModalFactory","types","SAVE_CANCEL","title","body","large","then","modal","getRoot","on","ModalEvents","save","find","submit","hidden","destroy","submitModalFormAjax","show","changeEvent","createEvent","initEvent","each","index","element","dispatchEvent","invalid","length","first","focus","serialize","call","methodname","args","done","response","updateCondition","renderConditions","getConditions","fail","setBody","data","condition","conditions","position","push","saveConditionsToRuleForm","conditionsjson","parse","setAttribute","render","html","innerHTML","classList","remove","Notification","exception","message","deleteActions","getElementsByClassName","i","dataset","filter","c","map","editActions"],"mappings":"4hDAiCMA,+BACoB,2BADpBA,2BAEgB,gBAFhBA,0BAGe,cAHfA,oCAIyB,oBAJzBA,0CAK+B,0BAL/BA,uCAM4B,gCAN5BA,gCAOqB,oCAPrBA,kCAQuB,oDAMT,eACVC,UAAYC,SAASC,cAAcH,gCACnCI,gBAAkBF,SAASC,cAAcH,4BAE/CC,UAAUI,iBAAiB,SAAS,SAACC,GACjCA,EAAEC,qBACIC,UAAYJ,gBAAgBK,MAChB,KAAdD,WACAE,iBAAiBF,UAAW,OAGpCG,6BAWEC,iBAAmB,SAACJ,UAAWK,cAAeC,eAC/BC,IAAbD,WACAA,SAAW,QAGTE,OAAS,CACXC,UAAWT,UACXU,aAAcC,KAAKC,UAAUP,eAC7BC,SAAUK,KAAKC,UAAUN,kBAGtBO,kBAASC,aAAa,qBAAsB,iBAAkB,EAAGN,SAStEN,iBAAmB,SAACF,UAAWM,eAEhBC,IAAbD,WACAA,SAAW,2BAGFS,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,YACzBC,OAAO,mBAAU,qBAAsB,sBACvCC,KAAMjB,iBAAiBJ,UAAW,GAAIM,UACtCgB,OAAO,IACRC,MAAK,SAAUC,OAEdA,MAAMC,UAAUC,GAAGC,sBAAYC,MAAM,SAAS9B,GAC1CA,EAAEC,iBACFyB,MAAMC,UAAUI,KAAK,QAAQC,YAGjCN,MAAMC,UAAUC,GAAGC,sBAAYI,QAAQ,WACnCP,MAAMQ,aAGVR,MAAMC,UAAUC,GAAG,SAAU,QAAQ,SAAS5B,GAC1CA,EAAEC,iBACFkC,oBAAoBjC,UAAWwB,UAGnCA,MAAMU,WAURD,oBAAsB,SAACjC,UAAWwB,WAC9BW,YAAczC,SAAS0C,YAAY,cACzCD,YAAYE,UAAU,UAAU,GAAM,GAMtCb,MAAMC,UAAUI,KAAK,UAAUS,MAAK,SAASC,MAAOC,SAChDA,QAAQC,cAAcN,oBAGpBO,QAAUlB,MAAMC,UAAUI,KAAK,4BAGjCa,QAAQC,OACRD,QAAQE,QAAQC,YACb,KACGxC,cAAgBmB,MAAMC,UAAUI,KAAK,QAAQiB,0BAE9CC,KAAK,CAAC,CACPC,WAAY,2CACZC,KAAM,CAACxC,UAAWT,UAAWU,aAAcC,KAAKC,UAAUP,gBAC1D6C,KAAM,SAAUC,UACZC,gBAAgBD,UAChBE,iBAAiBC,iBACjB9B,MAAMQ,WAEVuB,KAAM,WACF/B,MAAMgC,QAAQpD,iBAAiBJ,UAAWK,cAAe,WAWnE+C,gBAAkB,SAACK,UACjBC,2BAAgBD,MAEhBE,WAAaL,gBAEbI,UAAUE,UAAY,EACtBD,WAAWD,UAAUE,UAAYF,WAEjCC,WAAWE,KAAKH,WAChBA,UAAUE,SAAWD,WAAWhB,OAAS,GAG7CmB,yBAAyBH,aAQvBL,cAAgB,eACdK,WAAa,GACXI,eAAiBrE,SAASC,cAAcH,qCAAqCS,YAC5D,KAAnB8D,iBACAJ,WAAahD,KAAKqD,MAAMD,iBAErBJ,YASLG,yBAA2B,SAACH,YAC9BjE,SAASC,cAAcH,qCAAqCyE,aAAa,QAAStD,KAAKC,UAAU+C,aACjGjE,SAASC,cAAcH,2CAA2CyE,aAAa,QAAS,IAetFZ,iBAAmB,SAACM,+BACZO,OACN,gCACA,YAAgBP,aAClBpC,MAAK,SAAS4C,MACZzE,SAASC,cAAcH,2BAA2B4E,UAAYD,KAC9DhE,wBAdJT,SAASC,cAAcH,wCAAwC6E,UAAUC,OAAO,aAgB7Ef,MAAK,WACJgB,aAAaC,UAAU,CAACC,QAAS,kCAOnCtE,sBAAwB,mBAGpBuE,cAAgBhF,SAASiF,uBAAuBnF,kDAC7CoF,GACLF,cAAcE,GAAG/E,iBAAiB,SAAS,eAInC+D,SAAWc,cAAcE,GAAGC,QAAQjB,SACpCD,WAAaL,gBACZwB,QAAO,SAAAC,UAAKA,EAAEnB,WAAaA,YAC3BoB,KAAI,SAACtB,UAAWnB,6CAAemB,eAAWE,SAAUrB,WACzDuB,yBAAyBH,YACzBN,iBAAiBM,gBAVhBiB,EAAI,EAAGA,EAAIF,cAAc/B,OAAQiC,UAAjCA,WAeHK,YAAcvF,SAASiF,uBAAuBnF,iDAC3CoF,IACLK,YAAYL,IAAG/E,iBAAiB,SAAS,eAKjC6D,UAFaJ,gBACO2B,YAAYL,IAAGC,QAAQjB,UAG/C1D,iBAAiBwD,UAAUjD,UAAWiD,eARrCkB,GAAI,EAAGA,GAAIK,YAAYtC,OAAQiC,YAA/BA"}